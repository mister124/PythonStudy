# vscode 
- 단축키
ctrl+X: 행 삭제 (빈 선택)
ctrl+C: 행 복사 (빈 선택)
ctrl+Enter: 아래에 행 삽입
ctrl+shift+Enter: 위에 행 삽입
alt+Down: 행을 아래로 이동
alt+Up: 행을 위로 이동
alt+shift+Down: 위에 행 복사 추가
alt+shift+Up: 아래에 행 복사 추가
Home: 행의 시작으로 이동
End: 행의 끝으로 이동
ctrl+f: 찾기
ctrl+h: 바꾸기
alt+shift+f: 정렬
ctrl(+shift)+left,right: 구간 (드래그) 이동
ctrl+/: 주석 토글

# Function
-사용자 정의 함수 
def function_name(parameter: type):
	return statement
- print(*objects, sep=' ', end='\n')
- input(prompt): If the prompt argument is present, it is written to standard output without a 
trailing newline. The function then reads a line from input, converts it to a string (stripping a 
trailing newline), and returns that.
- map(function, iterable): Return an iterator that applies function to every item of iterable, yielding 
the results.
- chr(i): Return the string representing a character whose Unicode code point is the integer i.
- sum(iterable): Sums start and the items of an iterable from left to right and returns the total.
- round(number, ndigits=None): Return number rounded to ndigits precision after the decimal
point. If ndigits is omitted or is None, it returns the nearest integer to its input.
- ord(c): Given a string representing one Unicode character, return an integer representing the 
Unicode code point of that character.
- len(s): Return the length (the number of items) of an object.
- max(iterable): Return the largest item in an iterable or the largest of two or more arguments.
- min(iterable): Return the smallest item in an iterable or the smallest of two or more arguments.
- sorted(iterable[, reverse=False]): Return a new sorted list from the items in iterable.

# module
- Python file with a collection of functions, variables, or classes.
- import module, import module as m, from module import *function
-sys
sys.stdin.readline(): \n까지 str로 반환, input보다 빠름, int변환 시 rstrip 필요없음
/input=sys.stdin.raedline 가능
-collections
collections.Counter(iterable)[.most_common(n)]: iterable을 frequency 기준으로 [n개] 정렬 후 dic
type과 유사하게 반환

# Str
class str(object=''): Return a str version of object.
' ', " ", ''' ''', """ """ 
-Method
split(sep, maxsplit): default sep=' ', default maxsplit=-1, list로 반환
'sep'.join(list): str으로만 구성된 list 내 값들을 합쳐서 str으로 반환
rstrip([chars]): default [chars]='', [chars]를 오른쪽으로부터 일치하지 않을 때까지 제거
lstrip([chars]): default [chars]='', [chars]를 왼쪽으로부터 일치하지 않을 때까지 제거
strip([chars]): default [chars]='', [chars]를 양쪽으로부터 일치하지 않을 때까지 제거
find(sub[, start[, end]]): Return the lowest index in the string where substring sub is found within
/the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. 
/Return -1 if sub is not found.
zfill(width): Return a copy of the string left filled with ASCII '0' digits to make a string of length 
/width.
replace(old, new[, count]): Return a copy of the string with all occurrences of substring old 
/replaced by new. If the optional argument count is given, only the first count occurrences are 
/replaced.
-Formating
f'{variable:0개수.자릿수f}'

<Int>
class int(x=0): Return an integer object constructed from a number or string x, or return 0 if no 
/arguments are given.

<Float>
class float(x=0.0): Return a floating point number constructed from a number or string x.

<Bool>
class bool(x=False): Return a Boolean value, i.e. one of True or False. 

<Range>
class range(start, stop, step=1)

<Iterable>
An object capable of returning its members one at a time.
/Examples of iterables include all sequence types (such as list, str, and tuple).

<Iterator>
An object representing a stream of data. Repeated calls to the iterator’s next() method return 
/successive items in the stream.

<Operator>
-Arithmetic
+: Addition, str 결합
-: Substraction
*: Multiplication, str 반복 결합
**: Exponentiation
/: Division, float 반환
//: Floor division, int 반환
%: Modulus
-Boolean
x or y, x and y, not x
-Comparison
<, <=, >, >=, ==, !=
-Sequence Types(list, tuple, range)
x in s, x not in s, s + t, s*n or n * s, slicing: s[start=0:stop=len(s):step=1]

<Escape code>
\n: str 내 줄바꿈
\\: str 내 \ 표현

<Conditional statement>
if condition:
    statement
elif condition: 
    statement
else:
    statement
A if condition else B if condition else C: return A or B or C

<Loop>
for item in seq:
while condition:
break: escape loop
continue: 현재 loop를 건너뜀
pass: 아무 명령도 실행하지 않음

<two dimensional array>
tda = [[0]*col for i in range(row)] 

# class
-code
class a:









